feature_specification_task:
  description: >
    Define and scope the feature for {feature_name}, ensuring that it fits within the development cycle and aligns with the product's overall goals.

    1) **Problem Definition**: 
       Describe the core problem this feature will solve and why it is important to both the users and the business. Ensure the problem is clear, concise, and scoped to avoid ambiguity. 
       
       The main problem to solve is/are:
       {specific_pain_points}

    2) **Shaped Solution**: 
       Provide a shaped solution for the problem. This should include sketches or visualizations that outline the functionality and user experience.
       - Describe how the user interacts with this feature.
       - List the primary actions or workflows the feature supports.
       - Keep the solution at a high level to allow development flexibility but clear enough for a designer and developer to understand the core functionality.

       Key aspects of the solution should be:
       {key_solution_aspects}

    3) **Scope and Boundaries**: 
       Define the boundaries of the feature to ensure it can be completed within the designated cycle. Highlight what is included and explicitly state what is **out of scope**.
       - Must-have: 
         - The minimum feature set required to address the problem.
         - Example: A form that allows users to generate a request with validation and error handling.
       - Nice-to-have: 
         - Features that could enhance the experience but are not essential for solving the problem.
         - Example: Automated suggestions based on previous user inputs.

    4) **No Over-Specification**: 
       Provide enough detail to communicate the solution without dictating how it should be built. Allow flexibility for developers and designers to determine the best technical approach.

    5) **Success Criteria**: 
       Define how the success of the feature will be measured. Focus on measurable outcomes, such as performance improvements, increased user satisfaction, or decreased error rates.

  expected_output: >
    A functional spec, written in {language}, that includes:
    1. A clear problem definition.
    2. A high-level shaped solution, with supporting visuals if possible.
    3. Clear scope, outlining must-have and nice-to-have features.
    4. Success criteria for measuring the feature's effectiveness.


previous_spec_review_task:
  description: >
    Review the previously written specification to use it as a starting point and to ensure it meets the business and technical goals. Check if all requirements are captured clearly and if any modifications are needed.
    1) **Requirement Validation**:
       Ensure that the core problem is well understood and scoped correctly.
       - Are the specific pain points addressed clearly?
       - Is there any ambiguity in the problem definition that needs clarification?

    2) **Solution Review**:
       Examine the shaped solution to confirm that it aligns with user workflows and business objectives.
       - Are user interactions clearly defined?
       - Does the solution leave enough flexibility for the development team?
       - Are the key aspects of the solution properly outlined?

    3) **Scope Verification**:
       Verify the scope and boundaries to ensure that the feature can be delivered within the designated development cycle.
       - Are the must-have features clear and well-defined?
       - Are nice-to-have features explicitly separated from core requirements?
       - Is anything marked as out of scope that should be revisited?

    4) **Feedback and Adjustments**:
       Provide feedback on areas where the spec can be improved.
       - Suggest any missing elements or additional considerations that should be taken into account.
       - Recommend changes if there are parts of the feature that seem over-specified or unnecessary for the current cycle.

    The previously written documentation file can be found below
    {pitch_spec_gdocs}

  expected_output: >
    The following Google Docs document should be updated:
    {pitch_review_gdocs}

    A review document with:
    1. Clear validation of the problem definition and solution.
    2. Detailed feedback on the solution's alignment with user workflows.
    3. Adjustments or recommendations regarding scope or must-have/nice-to-have features.
    4. Any necessary clarifications or changes to ensure the spec fits within the development cycle.

google_docs_formatting_task:
  description: >
    Apply consistent formatting to the following Google Docs document using Google Docs formatting tools. 
    Document to format: {pitch_spec_gdocs}

    The task focuses solely on formatting elements like headings, bold, italic, and other text styles, without altering the document's organization or content structure.
    You can ocasionally organize chunks of text to improve readibility and keep consistency, for example: adding a line-break, removing or adding heading numbers.

    1) **Formatting Requirements**: 
       Ensure the following formatting elements are applied consistently throughout the document:
       - Headings: Apply appropriate heading levels (Heading 1, Heading 2, etc.) to section titles and subsections.
       - Bold: Use bold formatting for important keywords, section headers, or terms that require emphasis.
       - Italic: Apply italic formatting where necessary for emphasis or when citing terms, titles, or external references.
       - Lists: Format bullet points and numbered lists where applicable.
       - Line Spacing: Ensure consistent line spacing throughout the document (e.g., single or 1.15 spacing).
       - Fonts: Ensure the same font and font size are used uniformly, unless otherwise specified.

    2) **Scope and Boundaries**: 
       The task is limited to formatting using Google Docs' native formatting tools. It should not include reorganization or editing of content.
       - Must-have: 
         - Application of consistent headings and text formatting (bold, italic, etc.).
         - Proper formatting for lists and line spacing.
         - Use of the GOOGLEDOCS_UPDATE_EXISTING_DOCUMENT feature to implement the changes.
       - Out of scope: 
         - Changing the structure or organization of the document.
         - Editing or modifying text content.

    3) **No Over-Specification**: 
       Use general guidelines for formatting without dictating every individual formatting choice, leaving flexibility for the stylistic elements required by the document's content.

    4) **Success Criteria**: 
       Define success based on the following measurable outcomes:
       - Consistent application of headings, bold, italic, and other text styles.
       - Properly formatted lists and line spacing throughout the document.
       - Document formatting aligns with typical professional standards.

    5) **Process**:
      - Break down the formatting tasks into smaller steps to ensure the correct application of styles. Apply one change at a time.

    6) **Tools**:
      - editDocs is a list of requests to be made to the Google Docs API. 
         - Documentation of available API requests can be obtained from https://developers.google.com/docs/api/reference/rest/v1/documents/request
         - Below some examples, 
            - Inserts text at the beginning of the document: [{{ "insertText": {{ "location": {{ "index": 0 }}, "text": "Hello, world!" }} }}] 
            - Delete a paragraph by its index: [{{ "deleteParagraph": {{ "location": {{ "index": 0 }} }} }}] 
            - Replace all text in a paragraph: [{{ "replaceAllText": {{ "containsText": {{ "text": "Hello, world!" }}, "replaceText": "Hello, world!" }} }}] 
            - Add a named range to a specific location: [{{ "createNamedRange": {{ "range": {{ "startIndex": 10, "endIndex": 20 }}, "name": "ExampleRange" }} }}] 
            - Delete a named range by its name: [{{ "deleteNamedRange": {{ "name": "ExampleRange" }} }}] 
            - Update paragraph style to make text bold from index 5 to 15: [{{ "updateParagraphStyle": {{ "range": {{ "startIndex": 5, "endIndex": 15 }}, "paragraphStyle": {{ "namedStyleType": "HEADING_1" }}, "fields": "namedStyleType" }} }}]

  expected_output: >
    A formatted Google Docs document that includes:
    1. Consistent use of headings and subheadings.
    2. Proper application of bold, italic, and other text styles.
    3. Lists and line spacing formatted consistently.
    4. Changes made using GOOGLEDOCS_UPDATE_EXISTING_DOCUMENT.
